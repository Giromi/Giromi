#
#
# def test_list():
#     num_rows = 8
#     num_cols = 8
#     glider = List(
#         List(0, 1, 0, 0, 0, 0, 0, 0),
#         List(0, 0, 1, 0, 0, 0, 0, 0),
#         List(1, 1, 1, 0, 0, 0, 0, 0),
#         List(0, 0, 0, 0, 0, 0, 0, 0),
#         List(0, 0, 0, 0, 0, 0, 0, 0),
#         List(0, 0, 0, 0, 0, 0, 0, 0),
#         List(0, 0, 0, 0, 0, 0, 0, 0),
#         List(0, 0, 0, 0, 0, 0, 0, 0),
#     )
# # My first Mojo program!
# def main():
#     print("Hello, World!")
#
#     name = input("Who are you? ")
#     greeting = "Hi, " + name + "!"
#     print(greeting)
#
#
#     test_list()

from gridv1 import Grid
from python import Python
import time

def grid_str(grid: Grid) -> String:
    # Create an empty String
    str = String()

    # Iterate through rows 0 through rows-1
    for row in range(grid.rows):
	      # Iterate through columns 0 through cols-1
        for col in range(grid.cols):
            if grid.data[row][col] == 1:
                str += "*"  # If cell is populated, append an asterisk
            else:
                str += " "  # If cell is not populated, append a space
        if row != grid.rows - 1:
            str += "\n"     # Add a newline between rows, but not at the end
    return str

def run_display(owned grid: Grid) -> None:
    while True:
        print(str(grid))
        print()
        if input("Enter 'q' to quit or press <Enter> to continue: ") == "q":
            break
        grid = grid.evolve()

def run_pygame(
    owned grid: Grid,
    window_height: Int = 600,
    window_width: Int = 600,
    background_color: String = "black",
    cell_color: String = "green",
    pause: Float64 = 0.1,
) -> None:
    # Import the pygame Python package
    pygame = Python.import_module("pygame")

    # Initialize pygame modules
    pygame.init()

    # Create a window and set its title
    window = pygame.display.set_mode((window_height, window_width))
    pygame.display.set_caption("Conway's Game of Life")

    cell_height = window_height / grid.rows
    cell_width = window_width / grid.cols
    border_size = 1
    cell_fill_color = pygame.Color(cell_color)
    background_fill_color = pygame.Color(background_color)

    running = True
    while running:
        # Poll for events
        event = pygame.event.poll()
        if event.type == pygame.QUIT:
            # Quit if the window is closed
            running = False
        elif event.type == pygame.KEYDOWN:
            # Also quit if the user presses <Escape> or 'q'
            if event.key == pygame.K_ESCAPE or event.key == pygame.K_q:
                running = False

        # Clear the window by painting with the background color
        window.fill(background_fill_color)

        # Draw each live cell in the grid
        for row in range(grid.rows):
            for col in range(grid.cols):
                if grid[row, col]:
                    x = col * cell_width + border_size
                    y = row * cell_height + border_size
                    width = cell_width - border_size
                    height = cell_height - border_size
                    pygame.draw.rect(
                        window, cell_fill_color, (x, y, width, height)
                    )

        # Update the display
        pygame.display.flip()

        # Pause to let the user appreciate the scene
        time.sleep(pause)

        # Next generation
        grid = grid.evolve()

    # Shut down pygame cleanly
    pygame.quit()

def main():
    # glider = List(
    #     List(0, 1, 0, 0, 0, 0, 0, 0),
    #     List(0, 0, 1, 0, 0, 0, 0, 0),
    #     List(1, 1, 1, 0, 0, 0, 0, 0),
    #     List(0, 0, 0, 0, 0, 0, 0, 0),
    #     List(0, 0, 0, 0, 0, 0, 0, 0),
    #     List(0, 0, 0, 0, 0, 0, 0, 0),
    #     List(0, 0, 0, 0, 0, 0, 0, 0),
    #     List(0, 0, 0, 0, 0, 0, 0, 0),
    # )
    # start = Grid(8, 8, glider)
    # result = grid_str(start)
    # print(result)
    # result = start.grid_str()
    # print(result)
    # start = Grid.random(8, 16)
    # print(str(start))
    # run_display(start)

    start = Grid.random(128, 128)
    run_pygame(start)
